<launch>
    <!-- Loading Arguments -->
    <arg name="planner_type"        default="rrt_star"/>
    <arg name="map"        default="stage_6"/> #stage_1
    <arg name="save_path_in_file"   default="false"/>
    
    <!-- <arg name="map"        default="thermal_central_2022-03-14-13-05-27"/> -->
    <arg name="num_pos_initial"         default="1"/>
    <arg name="pos_uav_above_ugv"     default="2.0"/> #meters UAV above UGV
    <arg name="using_pc"    default="true"/> 
    <arg name="rviz"    default="true"/> 
    <arg name="viz_file"    default="test_tether_constraints"/>
    <arg name="sample_mode"    default="1"/> # Values: 1= Priority is move UAV , UAV and UGV , UGV ; 2= Priority is move UAV and UGV , UAV , UGV 
    <arg name="write_data_files" default="true"/>
    
    <arg name="pos_reel_x"    default="0.0"/> #position reel on UGV 
    <arg name="pos_reel_y"    default="0.0"/> #position reel on UGV
    <arg name="pos_reel_z"    default="0.38"/> #position reel on UGV
    <arg name="ugv_base_frame"    default="ugv_base_link"/> #position UGV
    <arg name="uav_base_frame"    default="uav_base_link"/> #position UAV
    <arg name="reel_base_frame"    default="reel_base_link"/> #position REEL
    <arg name="use_parable"   default="false"/>
    <arg name="use_distance_function"   default="true"/>
    <arg name="just_line_of_sigth"   default="false"/>

    <arg name="print_point_in_graph_marker"   default="false"/>
    <arg name="use_catenary_as_tether" default="true"/>  
    <arg name="write_data_residual" default="false"/> # Parameter to write the residual value for each optimizer Functor


    <!-- Extra -->
    <arg name="world_frame" default="map"/> 
    <arg name="debug_msgs"  default="false"/>
    <arg name="show_config_msgs" default="false"/>
    <arg name="use_loss_function"   default="false"/> 
    <arg name="length_tether_max"    default="30.0"/>   
    <arg name="distance_tether_obstacle"    default="0.1"/>   
    <arg name="name_output_file"    default="method"/>     
    <arg name="files_results"    default="results_marsupial_optimizer"/>     


    <!-- Publishing UGV and UAV tf -->
    <node pkg="marsupial_optimizer" type="optimizer_publisher_tf_node" name="optimizer_publisher_tf_node" output="screen">
        <rosparam command="load" file="$(find marsupial_optimizer)/cfg/$(arg map).yaml" />
        <param name="num_pos_initial" value="$(arg num_pos_initial)"/>
        <param name="pos_uav_above_ugv" value="$(arg pos_uav_above_ugv)"/>
        <param name="uav_base_frame" value="$(arg uav_base_frame)"/>
        <param name="ugv_base_frame" value="$(arg ugv_base_frame)"/>
        <param name="reel_base_frame" value="$(arg reel_base_frame)"/>
    </node>

    <!-- Publishing static tf -->
    <node pkg="tf" type="static_transform_publisher" name="map_tf_node" args="0 0 0 0 0 0  world /map 10"/> # x y z y p r
    <node pkg="tf" type="static_transform_publisher" name="reel_base_link_tf_node" args="$(arg pos_reel_x) $(arg pos_reel_y) $(arg pos_reel_z) -0.0 0.0 0.0  $(arg ugv_base_frame) $(arg reel_base_frame) 10"/> # x y z y p r

    <!-- Launch Octomap of Scenario -->
    <include file="$(find marsupial_optimizer)/launch/octomap_server.launch">
        <arg name="map_file"  value="$(arg map)"/>    
    </include>

    <include file="$(find marsupial_optimizer)/launch/octomap_server.launch">
        <arg name="map_file"  value="$(arg map)_obstacles"/>    
        <arg name="node_name"  value="octomap_server_obstacles"/>  
        <arg name="published_pc"  value="/region_growing_obstacles_pc_map"/>   
    </include>
    <include file="$(find marsupial_optimizer)/launch/octomap_server.launch">
        <arg name="map_file"  value="$(arg map)_traversability"/>   
        <arg name="node_name"  value="octomap_server_traversability"/>   
        <arg name="published_pc"  value="/region_growing_traversability_pc_map"/>   
    </include>

    <!-- RViz -->
    <node pkg="rviz" name="rviz" type="rviz" args="-d $(find rrt_planners)/viz/$(arg viz_file).rviz" if="$(arg rviz)"/>

 <!-- Local Planner: Optimizer Ceres-->
    <node pkg="marsupial_optimizer" type="test_tether_constraints_node" name="test_tether_constraints_node" output="screen"># launch-prefix="gdb -ex run --args"> #launch-prefix="valgrind">
        <rosparam command="load" file="$(find marsupial_optimizer)/cfg/3d_local_params.yaml"/>
        <rosparam command="load" file="$(find marsupial_optimizer)/cfg/$(arg map)_ws.yaml"/>
       
        <remap from="/octomap_binary_local" to="/octomap_binary"/>
       
        <param name="world_frame" value="$(arg world_frame)"/> 
        <param name="ugv_base_frame" value="$(arg ugv_base_frame)"/> 
        <param name="uav_base_frame" value="$(arg uav_base_frame)"/>
        <param name="reel_base_frame" value="$(arg reel_base_frame)"/>
        <param name="debug" value="$(arg debug_msgs)"/>
        <param name="show_config" value="$(arg show_config_msgs)"/>

        <param name="write_data_residual" value="$(arg write_data_residual)"/>
        <param name="use_distance_function"    value="$(arg use_distance_function)"/>     
        <param name="use_parable"   value="true"/>
            
        <param name="n_iter_opt"    value="500"/>  #0  <!-- number max. of iterations per optimization --> 
       
        <param name="use_loss_function"   value="$(arg use_loss_function)"/> test_tether_constraints
        <param name="use_catenary_as_tether"    value="$(arg use_catenary_as_tether)"/>  # TETHER     

        <param name="tether_obstacle_constraint"   value="true"/>    # tether_constraint
        <param name="tether_length_constraint"     value="true"/>    # tether_length_constraint 
        <param name="tether_parameters_constraint" value="true"/>    # tether_parameters_constraint  

        <!-- Catenary Constraint Parameters -->
        <param if="$(arg use_catenary_as_tether)" name="w_eta_1" value="0.001" />     # Catenary Obstacles collision 
        <param if="$(arg use_catenary_as_tether)" name="w_eta_2" value="0.400" />     # Catenary length 
        <param if="$(arg use_catenary_as_tether)" name="w_eta_3" value="1.0" />       # Catenary Parameter 
        <param if="$(eval not arg('use_catenary_as_tether'))" name="w_eta_1" value="0.001" />      # Parabola Obstacles collision 
        <param if="$(eval not arg('use_catenary_as_tether'))" name="w_eta_2" value="0.100" />       # Parabola length 
        <param if="$(eval not arg('use_catenary_as_tether'))" name="w_eta_3" value="0.600" />       # Parabola Parameter 

        <param name="length_tether_max" value="$(arg length_tether_max)"/>  
        #Parameter for Tether
        <param name="distance_tether_obstacle"  value="$(arg distance_tether_obstacle)"/> <!--bound distance catenary to obstacles [m] -->   
        #Parameter to write file 
        <param name="write_data_for_analysis"    value="$(arg write_data_files)"/>     
        <param name="name_output_file"    value="$(arg name_output_file)"/>     
        <param name="num_pos_initial"   value="$(arg num_pos_initial)"/>     
        <param name="path"   value="$(env HOME)/$(arg files_results)/"/>     
        <param name="pc_user_name"  value="$(env HOME)/$(arg files_results)/"/>     
        <param name="path_mission_file"  value="$(find marsupial_mission_interface)/cfg/optimized_path/"/>     

        <!-- For Grid3D -->
        <param name="map_path"   value="$(find marsupial_optimizer)/maps/$(arg map).bt"/>
        <param name="map_path_trav"   value="$(find marsupial_optimizer)/maps/$(arg map)_traversability.bt"/>
        <param name="map_path_obst"   value="$(find marsupial_optimizer)/maps/$(arg map)_obstacles.bt"/>
        <param name="global_frame_id"   value="map"/>
        <!-- <param name="sensor_dev "   value="0.2"/> # Gaussian error -->
    </node>    
   




</launch>