<launch>

    <!-- Loading Arguments -->
    <arg name="planner_type"        default="rrt_star"/>
    <arg name="scenario_number"        default="1"/>
    <arg name="num_pos_initial"         default="1"/>
    <arg name="num_test"         default="1"/>
    <arg name="pos_uav_above_ugv"     default="1.0"/> #meters UAV above UGV
    <arg name="rviz"    default="true"/> 
    <arg name="viz_file"    default="marsupial"/>
    <arg name="is_coupled"    default="false"/>
    <arg name="sample_mode"    default="1"/>
    <arg name="write_data_files" default="true"/>
    <arg name="world_frame" default="map"/> 
    <arg name="ugv_frame" default="ugv_base_link"/> 
    <arg name="uav_frame" default="uav_base_link"/>
    <arg name="reel_frame" default="reel_base_link"/>
    <arg name="length_tether_max"    default="20.0"/>   
    <arg name="use_distance"    default="true"/>   

    <arg name="write_data_residual" default="true"/> # Parameter to write the residual value for each optimizer Functor
    <arg name="verbose_optimizer" default="false"/>

    <arg name="name_output_file"    default="method"/>     
    <arg name="path_files"    default="/home/simon/results_marsupial_optimizer/"/>    
    
    <arg name="pos_reel_x"    default="0.0"/> #position reel on UGV_base_link 
    <arg name="pos_reel_y"    default="0.0"/> #position reel on UGV_base_link
    <arg name="pos_reel_z"    default="0.5"/> #position reel on UGV_base_link

    <arg name="map_file" default="stage_$(arg scenario_number)"/>

    <!-- Publishing UGV and UAV tf -->
    <node pkg="marsupial_optimizer" type="optimizer_publisher_tf_node" name="optimizer_publisher_tf_node" output="screen">
        <rosparam command="load" file="$(find marsupial_optimizer)/cfg/stage_$(arg scenario_number).yaml" />
        <param name="num_pos_initial" value="$(arg num_pos_initial)"/>
        <param name="pos_uav_above_ugv" value="$(arg pos_uav_above_ugv)"/>
        <param name="uav_base_frame" value="uav_base_link"/>
        <param name="ugv_base_frame" value="ugv_base_link"/>
        <param name="reel_base_frame" value="reel_base_link"/>
    </node>

    <!-- Publishing static tf -->
    <node pkg="tf" type="static_transform_publisher" name="map_tf_node" args="0 0 0 0 0 0  world /map 10"/> # x y z y p r
    <node pkg="tf" type="static_transform_publisher" name="reel_base_link_tf_node" args="$(arg pos_reel_x) $(arg pos_reel_y) $(arg pos_reel_z) -0.0 0.0 0.0  ugv_base_link reel_base_link 10"/> # x y z y p r

    <!-- Launch Octomap of Scenario -->
    <include file="$(find marsupial_optimizer)/launch/octomap_server.launch">
        <arg name="map_file"  value="stage_$(arg scenario_number)"/>    
    </include>

    <!-- Launch  region_growing-->
    <include file="$(find rrt_planners)/launch/region_growing.launch">
    </include> 

    <!-- Launch Optimizer-->
    <!-- Local Planner: Optimizer Ceres-->
    <node pkg="marsupial_optimizer" type="test_catenary_optimizer" name="test_catenary_optimizer" output="screen"># launch-prefix="gdb -ex run --args"> #launch-prefix="valgrind">
        <rosparam command="load" file="$(find marsupial_optimizer)/cfg/3d_local_params.yaml"/>
        <rosparam command="load" file="$(find marsupial_optimizer)/cfg/stage_$(arg scenario_number)_ws.yaml"/>
        <rosparam command="load" file="$(find marsupial_optimizer)/cfg/test_catenary_constraint.yaml"/>
        <remap from="/octomap_binary_local" to="/octomap_binary"/>
        <param name="world_frame" value="$(arg world_frame)"/> 
        <param name="ugv_base_frame" value="$(arg ugv_frame)"/> 
        <param name="uav_base_frame" value="$(arg uav_frame)"/>
        <param name="reel_base_frame" value="$(arg reel_frame)"/>

        <param name="write_data_residual" value="$(arg write_data_residual)"/>
        <param name="verbose_optimizer" value="$(arg verbose_optimizer)"/>

        <param name="use_distance" value="$(arg use_distance)"/>
       
        <!-- Catenary Constraint Parameters -->
        <param name="w_eta_1"    value="0.0120"/>   # catenary Obstacles collision 0.00100
        <param name="w_eta_2"    value="0.0"/>   # catenary length 0.00150

        <param name="n_iter_opt"    value="1000"/>   <!-- number max. of iterations per optimization --> 
        <param name="length_tether_max" value="$(arg length_tether_max)"/>  
            
        #Parameter for Catenary
        <param name="distance_catenary_obstacle"  value="0.10"/> <!--bound distance catenary to obstacles [m] -->   
        #Parameter to write file 
        <param name="name_output_file"    value="$(arg name_output_file)"/>     
        <param name="scenario_number"    value="$(arg scenario_number)"/>     
        <param name="num_pos_initial"   value="$(arg num_pos_initial)"/>     
        <param name="num_test"   value="$(arg num_test)"/>     
        <param name="path"   value="$(arg path_files)"/>     

        <!-- For Grid3D -->
        <param name="map_path"   value="$(find marsupial_optimizer)/maps/stage_$(arg scenario_number).bt"/>
        <param name="global_frame_id"   value="map"/>
    </node>

    <!-- RViz -->
    <!-- <node pkg="rviz" name="rviz" type="rviz" args="-d $(find marsupial_optimizer)/viz/$(arg viz_file).rviz" if="$(arg rviz)"/> -->

</launch>