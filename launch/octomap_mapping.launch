<!-- 
  Example launch file for octomap_server mapping: 
  Listens to incoming PointCloud2 data and incrementally builds an octomap. 
  The data is sent out in different representations. 

  Copy this file into your workspace and adjust as needed, see
  www.ros.org/wiki/octomap_server for details  
-->

<launch>
	<arg name="cloud_in" default="/cloud_pcd"/>
	<arg name="cloud_out" default="octomapping_full"/>
	<arg name="frame_id" default="world"/>


	<node pkg="octomap_server" type="octomap_server_node" name="octomap_server">
		<param name="resolution" value="0.05" />
		
		<!-- fixed map frame (set to 'map' if SLAM or localization running!) -->
		<!-- <param name="base_frame_id" value="base_link"/> -->
		<param name="frame_id" value="$(arg frame_id)"/>
		<param name="occupancy_min_z" value="-3"/>
		<param name="occupancy_max_z" value="30"/>
		<param name="pointcloud_min_z" value="-3"/>
		<param name="pointcloud_max_z" value="30"/>
		
		<!-- maximum range to integrate (speedup!) -->
		<!-- <param name="sensor_model/max_range" value="5.0" /> -->
		
		<!-- data source to integrate (PointCloud2) -->
		<remap from="cloud_in" to="$(arg cloud_in)" />
		<remap from="octomap_full" to="$(arg cloud_out)" />
		<remap from="octomap_point_cloud_centers" to="octomapping_point_cloud_centers" />
	
	</node>
</launch>